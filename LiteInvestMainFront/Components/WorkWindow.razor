@using System.Collections.Concurrent
@using System.Drawing
@using System.Net.WebSockets
@using DevExpress.Data.Browsing
@using LiteInvestMainFront.Data
@using LiteInvestMainFront.Services
@using LiteInvestServer.Json
@using LiteInvestServer.Records
@using PlazaEngine.Entity
@using Websocket.Client
@using GridRowClickEventArgs = Telerik.Blazor.Components.GridRowClickEventArgs
@using Orientation = DevExpress.Blazor.Orientation
@implements IDisposable;
@inject IJSRuntime JSRuntime
@inject JsInteropService jsInteropService;

@rendermode InteractiveServer


<style>
	.cardnew {
	height: 800px;
	}
	/* Общие стили для WorkWindow */
	.workwindow-container {
	background-color: #f5f5f5;
	border: 1px solid #ddd;
	border-radius: 5px;
	min-height: 250px;
	}

	.telerik-table {
	padding: 0px;
	}

	.k-grid-md td, .k-grid-md .k-table-td {
	padding-block: 0px !important;
	padding-inline: 0px !important;
	}
	/* Стили для контейнера с таблицей */
	.table-container {
	height: 90vh;
	scrollbar-width: thin;
	overflow-y: auto; /* Включаем вертикальный скроллинг */
	}

	/* Стили для самой таблицы */
	.telerik-grid {
	width: 100%;
	height: 100%;
	}

	/* Стили для контента таблицы */
	.telerik-grid .k-grid-content {
	overflow-y: auto; /* Включаем вертикальный скроллинг в таблице */
	}

	/* Заголовок WorkWindow */
	.workwindow-container h3 {
	margin-top: 0;
	font-size: 18px;
	color: #333;
	font-weight: bold;
	}

	/* Стили для TileLayout (если нужно стилизовать плитки) */
	.telerik-tilelayout-item {
	min-width: 285px;
	min-height: 285px;
	margin-bottom: 15px;
	}

	.tile-content {
	background-color: #fff;
	border-radius: 5px;
	}

	.k-grid-footer {
	padding-inline-end: 0px !important;
	}

	.dxbl-chart-root .dxbl-chart {
	padding: 0px !important;
	}


	.k-grid-content {
	scrollbar-width: none;
	}

	.k-grid-header {
	padding-inline-end: 0px !important;
	}
	/* Дополнительные улучшения для внешнего вида */
	.telerik-grid .k-header {
	background-color: #f0f0f0;
	color: #333;
	text-align: center;
	font-weight: bold;
	}

	.telerik-grid .k-grid-header {
	border-bottom: 1px solid #ddd;
	}

	.telerik-grid .k-grid-table {
	border-spacing: 0;
	border-collapse: collapse;
	}

	.telerik-grid .k-grid-table td,
	.telerik-grid .k-grid-table th {
	text-align: center;
	border: 1px solid #ddd;
	}

	.k-card-body {
	padding: 0px;
	padding-block: 0 !important;
	padding-inline: 0 !important;
	}
	/*.k-tilelayout-item-header{
	display: none;
	}*/
	.k-grid-content {
	padding: 0px;
	}

	.k-tilelayout-item-body k-card-body {
	padding: 0px;
	}
	/* Убираем паддинги для всего TileLayout */
	.telerik-tilelayout {
	padding: 0;
	}

	.gridlayout-item {
	font-size: 1.2em;
	font-weight: 500;
	text-align: center;
	width: 100%;
	height: 800px;
	text-align: center;
	position: relative;
	z-index: 0;
	display: flex;
	align-items: start;
	justify-content: start;
	}

	.gridlayout-item:before {
	content: " ";
	position: absolute;
	z-index: -1;
	width: 100%;
	height: 100%;
	left: 0;
	top: 0;
	opacity: 0.4;
	}

	.gridlayout-header:before {
	background-color: var(--bs-red);
	}

	.gridlayout-content:before {
	background-color: var(--bs-yellow);
	}

	.gridlayout-left-side-bar:before {
	background-color: var(--bs-green);
	}

	.gridlayout-right-side-bar:before {
	}

	.gridlayout-footer:before {
	background-color: var(--bs-blue);
	opacity: 0.5;
	}

	.dxgrid {
	height: 100%;
	}


	.dxbl-grid {
	--dxbl-grid-font-size: 10px;
	}

	.chart {
	height: 80vh;
	}

	.highlighted-item {
	background-color: var(--bs-danger-bg-subtle)
	}

	.highlighted-item2 {
	background-color: var(--bs-success-bg-subtle)
	}

	.transparent-item {
	background-color:transparent
	}

	.card-body {
	padding: 0;
	}

	.removeOrder {
	cursor: pointer;
	float: right;
	}

</style>

<div id="@WindowId" tabindex="0">
	<TelerikGridLayout>
		<GridLayoutColumns>
			<Telerik.Blazor.Components.GridLayoutColumn Width="33.33%"/>
			<Telerik.Blazor.Components.GridLayoutColumn Width="33.33%"/>
			<Telerik.Blazor.Components.GridLayoutColumn Width="33.33%"/>
		</GridLayoutColumns>

		<GridLayoutRows>
			<Telerik.Blazor.Components.GridLayoutRow />
		</GridLayoutRows>
		<GridLayoutItems>
			<Telerik.Blazor.Components.GridLayoutItem Row="1" Column="1">
				<TelerikGrid  Size="Small" Class="telerik-table" Data="@ClusterDatas">
					<GridColumns>
						@foreach(ClusterData clusterData in ClusterDatas){
							<Telerik.Blazor.Components.GridColumn Field="@clusterData.Volume.ToString()" HeaderClass="d-none">@*  форматирование строки? *@
								<FooterTemplate>
									<span>
										@clusterData.DateTime
									</span>
								</FooterTemplate>
							</Telerik.Blazor.Components.GridColumn>
						}
					</GridColumns>
				</TelerikGrid>
			</Telerik.Blazor.Components.GridLayoutItem>
			<Telerik.Blazor.Components.GridLayoutItem Row="1" Column="2">

				<DxChart CssClass="chart"
				CustomizeSeriesPoint="@PrepareSeriesPoint"
				@ref="Chart"
				Data="Ticks"
				Width="100%"
				LabelOverlap="ChartLabelOverlap.Hide">
					<DxChartLineSeries Name="ticksLineSeries"
					T="TradeApi"
					TArgument="DateTime"
					TValue="decimal"
					ArgumentField="si => si.Time"
					ValueField="si => si.Price"
					HoverMode="ChartContinuousSeriesHoverMode.Series">

						<DxChartLegend Visible="false" />

						<!--<DxChartSeriesPoint Visible="true"
						HoverMode="ChartSeriesPointHoverMode.None" />-->
						<!--<DxChartSeriesLabel Visible="true"
						ValueFormat="ChartElementFormat.Thousands(1)" />-->
					</DxChartLineSeries>

					<DxChartArgumentAxis Visible="false">
						<DxChartAxisLabel Visible="false" />
						<DxChartAxisTick Visible="false" />
						<DxChartAxisMinorTick Visible="false" />
						<DxChartAxisGridLines Visible="true" />
					</DxChartArgumentAxis>

					<DxChartValueAxis Visible="false">
						<DxChartAxisLabel Visible="false" />
						<DxChartAxisTick Visible="false" />
						<DxChartAxisMinorTick Visible="false" />
						<DxChartAxisGridLines Visible="true" />
						<DxChartAxisRange StartValue="@minchart" EndValue="@maxchart" />
					</DxChartValueAxis>
				</DxChart>
			</Telerik.Blazor.Components.GridLayoutItem>
			<Telerik.Blazor.Components.GridLayoutItem Row="1" Column="3">
				@* 			<DxGrid CssClass="dxgrid"
			@ref=Grid
			Data="@Quotes"
			ShowAllRows="true"
			ColumnResizeMode="GridColumnResizeMode.NextColumn"
			TextWrapEnabled="false"
			CustomizeElement="Grid_CustomizeElement"
			ShowGroupPanel="false"
			HighlightRowOnHover="true"
			FocusedRowEnabled="true">

			<Columns>
			<DxGridDataColumn FieldName="Volume" />
			<DxGridDataColumn FieldName="Price"/>
			<DxGridDataColumn FieldName="Type" Width="0" Visible="false" />
			</Columns>
			</DxGrid> *@
				<TelerikGrid Id="@GridTableId" OnRowClick="@OnRowClickHandler" Height="90vh" Resizable="true" Size="Small" Class="telerik-table" Data="@Quotes">
					<GridColumns>
						<Telerik.Blazor.Components.GridColumn Width="45%" Field="Volume" HeaderClass="d-none" />
						<Telerik.Blazor.Components.GridColumn Width="45%" Field="Price" HeaderClass="d-none" />
						<Telerik.Blazor.Components.GridColumn Width="10%" Field="RestVolume" HeaderClass="d-none" />
					</GridColumns>
					<RowTemplate Context="Quotes">
						<td class="@GetClassForQuote(Quotes)">
							@Quotes.Volume
						</td>
						<td class="@GetClassForQuote(Quotes)">
							@Quotes.Price
						</td>
						<td class="@GetClassForQuote(Quotes)">
							@Quotes.RestVolume
							@if(Quotes.RestVolume.ToString() != string.Empty){
								<svg class="removeOrder" @onclick="() => RemoveOrderClick(Quotes)" xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="-2 -5 15 15">
									<line x1="0" y1="0" x2="10" y2="10" stroke="red" stroke-width="2" />
									<line x1="0" y1="10" x2="10" y2="0" stroke="red" stroke-width="2" />
								</svg>
							}
						</td>

					</RowTemplate>
				</TelerikGrid>
			</Telerik.Blazor.Components.GridLayoutItem>
		</GridLayoutItems>
	</TelerikGridLayout>
</div>

@code {

	static string plusHotKey = "Equal";
	static string minusHotKey = "Minus";
	static string cancelHotKey = "KeyC";

	DxChart<TradeApi> Chart;

	IGrid Grid;
	//А вдруг у меня все получится
	//Влруг я буду прав

	[Parameter] public BufferData Data { get; set; }

	[Parameter] public Action<SecurityApi>? OnClosing { get; set; }

	[Parameter] public SecurityApi secutityMain { get; set; }

	[Parameter] public ApiDataService ApiDataService { get; set; }

	[Parameter] public int Index { get; set; }


	public List<TradeApi> Ticks
	{
		get => Data.Ticks;
		set
		{
			Data.Ticks = value;
		}
	}

	public List<ClusterData> ClusterDatas { get; set; } = new List<ClusterData>();

	public class ClusterData
	{
		public decimal Volume;
		public DateTime DateTime;

		public ClusterData(decimal volume, DateTime dateTime)
		{
			Volume = volume;
			DateTime = dateTime;
		}
	}

	public List<WebsocketClient> WebSockets { get; set; }

	public ConcurrentDictionary<decimal, Order> Orders
	{
		get => Data.Orders;
		set
		{
			Data.Orders = value;
		}
	}

	public int AgregationStep
	{
		get => Data.AgregationStep;
		set{
			Data.AgregationStep = value;
		}
	}

	public string GetClassForQuote(MarketDepthLevel quote)
	{

		// if (quote.RestVolume != 0)
		// {
		// 	return quote.Type == Side.Sell ? "highlighted-item" : "highlighted-item2";
		// }

		if (quote.Volume == 0 || quote.Volume == null)
		{
			return "transparent-item";
		}

		return quote.Type == Side.Sell ? "highlighted-item" : "highlighted-item2";

	}

	protected override async Task<Task> OnInitializedAsync()
	{
		if (secutityMain == null)
			return base.OnInitializedAsync();

		WebSockets = new List<WebsocketClient>();

		jsInteropService.OnKeyDown += OnKeyDown;
		jsInteropService.OnScroll += OnScroll;

		ApiDataService.NewMyOrder += NewMyOrder;
		ApiDataService.NewMarketDepth += OnNewMarketDepth;
		ApiDataService.NewTicks += OnNewTicks;


		//сначала подпишемся на ордера
		await ApiDataService.SubscribePrivateOrders();

		WebSockets.Add(await ApiDataService.SubscribeOrderBook(secutityMain.id));
		WebSockets.Add(await ApiDataService.SubcribeTick(secutityMain.id));



		return base.OnInitializedAsync();
	}

	private void UpdateClusterData(decimal volumeSumm)
	{
		if (ClusterDatas != null && ClusterDatas.Count > 0)
		{
			ClusterDatas.RemoveAt(0);
		}

		ClusterDatas.Add(new ClusterData(volumeSumm, DateTime.Now));
	}

	private void NewMyOrder(Order myorder)
	{
		try{
			if (myorder.SecurityId != secutityMain.id)
				return;

			Console.WriteLine($"New Order {myorder.SecurityId} side = {myorder.Side} price {myorder.PriceOrder} state {myorder.State}");

			if (myorder.State == Order.OrderStateType.Activ || myorder.State == Order.OrderStateType.Partial)
			{
				Orders[myorder.PriceOrder] = myorder;

				UpdateOrdersAndGrid();
			}
			else if (myorder.State == Order.OrderStateType.Done
						|| myorder.State == Order.OrderStateType.Fail
						|| myorder.State == Order.OrderStateType.Cancel)
			{

				Console.WriteLine($"Removing Order {myorder.SecurityId} price {myorder.PriceOrder} state {myorder.State}");

				Orders.Remove(myorder.PriceOrder, out var _);

				if (LastCalculatedQuotesDictionary.ContainsKey(myorder.PriceOrder))
					LastCalculatedQuotesDictionary[myorder.PriceOrder].RestVolume = null;

				UpdateOrdersAndGrid();

			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private string WindowId { get; set; } = Guid.NewGuid().ToString();
	private string GridTableId { get; set; } = Guid.NewGuid().ToString();

	private void OnKeyDown(string windowId, string keyCode, bool isCtrl, bool isShift)
	{

		try
		{
			if (windowId != WindowId)
				return;

			if (keyCode == cancelHotKey)
			{
				foreach (var order in Orders)
				{
					ApiDataService.CancelOrder(order.Value);
				}
			}

			if (keyCode == plusHotKey)
			{
				if (AgregationStep > 0)
				{
					AgregationStep -= 5;
					Console.WriteLine($"{secutityMain.Isin} New Agregation Step {AgregationStep}");

					AggregateQuotes(bestbidsaved, bestasksaved, LastMdsaved);
					InvokeAsync(StateHasChanged);
				}
			}

			if (keyCode == minusHotKey)
			{
				AgregationStep += 5;

				AggregateQuotes(bestbidsaved, bestasksaved, LastMdsaved);
				InvokeAsync(StateHasChanged);

				Console.WriteLine($"{secutityMain.Isin} New Agregation Step {AgregationStep}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}

		//Console.WriteLine($"{keyCode} {windowId}");
	}

	private void OnScroll(string windowId)
	{
		if (windowId != WindowId)
			return;

		//Console.WriteLine($"{windowId}");
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("getScrollEvent", GridTableId);
			await JSRuntime.InvokeVoidAsync("addHotkeyListener", WindowId);
		}
	}

	//bool agreagate = true;


	private void CheckDictionaryForOrders(Dictionary<decimal,MarketDepthLevel> Levels)
	{ 
		foreach (var order in Orders)
		{
			//если есть заявка, но ее не видимо
			if (!Levels.ContainsKey(order.Key))
			{
				var md = new MarketDepthLevel()
				{
					Price = order.Key,
					Bid = 0,
					Ask = 0,
					//TODO надо проверить правильный ли это объем
					RestVolume = order.Value.VolumeExecuted,
				};
				Levels.TryAdd(order.Key, md);
			}


			Levels[order.Key].RestVolume = order.Value.Volume;
			//Console.WriteLine($"Order price added {order.Key} volume={order.Value.Volume}");
		}
	}

	private Dictionary<decimal, MarketDepthLevel> LastMdsaved;

	private async void OnNewMarketDepth(MarketDepthLevel bestbid,MarketDepthLevel bestask, string secinstrument, Dictionary<decimal, MarketDepthLevel> md)
	{

		try
		{

			if (secinstrument != secutityMain.id) return;

			if (md == null)
				return;

			bestbidsaved = bestbid;
			bestasksaved = bestask;
			LastMdsaved = md;

			AggregateQuotes(bestbid, bestask, md);
			InvokeAsync(StateHasChanged);

		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	public MarketDepthLevel bestasksaved { get; set; }

	public MarketDepthLevel bestbidsaved { get; set; }

	//

	private void AggregateQuotes(MarketDepthLevel bestbid,MarketDepthLevel bestask,Dictionary<decimal, MarketDepthLevel> md)
	{

		var maxlevel = md.Values.ToArray()[0].Price;
		var minlevel = md.Values.ToArray()[md.Count - 1].Price;

		Dictionary<decimal, MarketDepthLevel> AgregatedLevels = new();
		if (AgregationStep!=0)
		{


			for (decimal i = bestask.Price; i < maxlevel; i += AgregationStep*secutityMain.PriceStep)
			{
				decimal summ = 0;
				decimal level = i;
				for (decimal j = i; j <= i + AgregationStep * secutityMain.PriceStep; j += secutityMain.PriceStep)
				{
					if (!md.ContainsKey(j))
						md[j] = new MarketDepthLevel() { Price = j, Ask = 0, Bid = 0, Type = Side.Sell };

					summ +=md[j].Volume;
				}

				AgregatedLevels.TryAdd(level, new MarketDepthLevel() { Price = level ,Ask = summ,Bid=0});
			}

			for (decimal i =bestbid.Price; i> minlevel; i -= AgregationStep * secutityMain.PriceStep)
			{
				decimal summ = 0;
				decimal level = i;
				for (decimal j = i; j >= i - AgregationStep * secutityMain.PriceStep; j -= secutityMain.PriceStep)
				{
					if (!md.ContainsKey(j))
						md[j] = new MarketDepthLevel() { Price = j, Ask = 0, Bid = 0, Type = Side.Buy };

					summ += (decimal)md[j].Volume;
				}

				AgregatedLevels.TryAdd(level, new MarketDepthLevel() { Price = level, Ask = 0, Bid = summ,});
			}

		}

		if (AgregationStep == 0)
		{
			CheckDictionaryForOrders(md);
			LastCalculatedQuotesDictionary = md;

			Quotes = md.Values;
		}
		else
		{
			CheckDictionaryForOrders(AgregatedLevels);
			LastCalculatedQuotesDictionary = AgregatedLevels;

			Quotes = AgregatedLevels.Values.OrderByDescending(s => s.Price);
		}

		maxchart = bestbid.Price + levelsFromBest * secutityMain.PriceStep;
		minchart = bestbid.Price - levelsFromBest * secutityMain.PriceStep;
	}

	public Dictionary<decimal, MarketDepthLevel> LastCalculatedQuotesDictionary { get; set; }

	private void UpdateOrdersAndGrid()
	{
		if (LastCalculatedQuotesDictionary == null)
			return;

		CheckDictionaryForOrders(LastCalculatedQuotesDictionary);
		Quotes = LastCalculatedQuotesDictionary.Values.OrderByDescending(s => s.Price);

		InvokeAsync(StateHasChanged);
	}
	/*------ временно -------------- */

	[Parameter]
	public int start { get; set; }
	[Parameter]
	public DateTime dt { get; set; }

	[Parameter]
	public int orderbookcount { get; set; }

	[Parameter]
	public decimal levelsFromBest { get; set; } = 20;

	[Parameter]
	public decimal minchart { get; set; }

	[Parameter]
	public decimal maxchart { get; set; }


	//---------------------------------//


	private async void OnNewTicks(string secinstrument, List<TradeApi> ticks)
	{
		if (secinstrument != secutityMain.id) return;

		//Console.WriteLine(ticks[0].SecurityId + " new tick !" + ticks[0].Price);

		try
		{
			DateTime lasttime = DateTime.Now;

			try
			{
				if (Ticks.Count != 0 && Ticks[Ticks.Count - 1].Time != null)
				{
					lasttime = Ticks[Ticks.Count - 1].Time;
				}
				else
				{
					lasttime = DateTime.Now;
				}
			}
			catch (Exception ex)
			{
				lasttime = DateTime.Now;
			}

			int counter = 0;
			foreach (var tick in ticks)
			{
				start++;
				counter++;


				//tick.Time = dt + TimeSpan.FromSeconds(start);
				tick.Time = lasttime + TimeSpan.FromSeconds(counter);

				Ticks.Add(tick);

				try
				{
					if (Ticks.Count > 15) Ticks.RemoveAt(0);
				}
				catch (Exception ex)
				{

				}
			}
		}
		catch (Exception ex)
		{

		}

		await InvokeAsync(() => { Chart.RefreshData(); });
	}

	private void RemoveOrderClick(MarketDepthLevel level)
	{

		Orders.TryGetValue(level.Price, out var _order);

		if(_order==null)
			Console.WriteLine("No Order Found in Row");

		ApiDataService.CancelOrder(_order);


		// Orders.TryRemove(level.Price, out var _);


		// UpdateOrdersAndGrid();

		// InvokeAsync(StateHasChanged);
	}




	//TODO: Тут надо подумать конечно.
	void ScrollToLastRow1(MarketDepthLevel level)
	{
		Grid.MakeDataItemVisibleAsync(level);

		Console.WriteLine("visible row " + Grid.GetStartRowVisibleIndex());
	}

	void ScrollToLastRow(int count)
	{
		Console.WriteLine($"{count} scroll");
		Grid.MakeRowVisible(count);

	}

	protected void PrepareSeriesPoint(ChartSeriesPointCustomizationSettings pointSettings)
	{

		try
		{
			//всегда 1 элемент
			var t = (TradeApi)pointSettings.Point.DataItems.ToArray()[0];

			//показывать объём сверху
			pointSettings.PointLabel.Texts = new string[] { t.Volume.ToString() };
			pointSettings.PointLabel.Visible = true;

			//кружок
			pointSettings.PointAppearance.Symbol = ChartPointSymbol.Circle;

			//TODO: Исправить размеры - сделать адаптивными
			//TODO: написать логику расчета адаптивных элементов
			pointSettings.PointAppearance.Size = 1;

			if (t.Side == Side.Sell)
				pointSettings.PointAppearance.Color = Color.Red;
			else if (t.Side == Side.Buy)
				pointSettings.PointAppearance.Color = Color.Green;
		}
		catch (Exception ex)
		{

		}

	}


	async Task<Task> OnClosingMain()
	{
		try
		{
			//NOTE: помоему уже никак не поддерживается от слова совсем 
			ApiDataService.StopOrderBookProcesor(secutityMain.id);

			foreach (var webSocket in WebSockets)
			{
				if (webSocket == null)
					continue;

				try
				{
					var r = await webSocket.StopOrFail(WebSocketCloseStatus.NormalClosure, "Закрыта вкладка");

					if (!r)
					{
						Console.WriteLine($"Socket not closed! {secutityMain.id}");
					}

					else
					{
						Console.WriteLine($"Socket OK closed! {secutityMain.id}");
					}

				}
				catch (Exception ex)
				{
					Console.WriteLine(ex.Message);
				}
			}
		}
		catch(Exception ex)
		{
			Console.WriteLine(ex.Message);
		}

		OnClosing?.Invoke(secutityMain);
		return Task.CompletedTask;
	}

	Orientation currentOrientation;
	IEnumerable<MarketDepthLevel> Quotes;

	string messageConnection { get; set; }
	public object GetColor { get; set; }



	void IDisposable.Dispose()
	{
		ApiDataService.NewMarketDepth -= OnNewMarketDepth;
		ApiDataService.NewTicks -= OnNewTicks;

		jsInteropService.OnKeyDown -= OnKeyDown;
		jsInteropService.OnScroll -= OnScroll;
	}

	private int orderVolume = 1;


	private Task OnRowClickHandler(GridRowClickEventArgs arg)
	{
		try
		{
			var item = (MarketDepthLevel)arg.Item;

			if (Orders.ContainsKey(item.Price))
			{
				RemoveOrderClick(item);
				return Task.CompletedTask;
			}

			var order = new ClientOrder()
				{
					SecID = secutityMain.id,
					Side = item.Type,
					Volume = orderVolume,
					Price = item.Price,
					Market = false,
				};

			Console.WriteLine($"Sending order price = {order.Price} side = {order.Side}");

			ApiDataService.SendOrder(order);
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}

		return Task.CompletedTask;
	}

}

