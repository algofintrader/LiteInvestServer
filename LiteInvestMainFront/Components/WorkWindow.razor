
@using System.Drawing
@using System.Net.WebSockets
@using DevExpress.Data.Browsing
@using LiteInvestMainFront.Data
@using LiteInvestServer.Json
@using Microsoft.AspNetCore.RateLimiting
@using PlazaEngine.Entity
@using Websocket.Client
@using Orientation = DevExpress.Blazor.Orientation
@implements IDisposable;


<style>
	.cardnew {
		height: 800px;

	}

	.gridlayout-item {
		font-size: 1.2em;
		font-weight: 500;
		text-align: center;
		width: 100%;
		height: 800px;
		text-align: center;
		position: relative;
		z-index: 0;
		display: flex;
		align-items: start;
		justify-content: start;
	}
	.gridlayout-item:before {
		content: " ";
		position: absolute;
		z-index: -1;
		width: 100%;
		height: 100%;
		left: 0;
		top: 0;
		opacity: 0.4;
	}
	.gridlayout-header:before {
		background-color: var(--bs-red);
	}
	.gridlayout-content:before {
		background-color: var(--bs-yellow);
	}
	.gridlayout-left-side-bar:before {
		
		background-color: var(--bs-green);
	}
	.gridlayout-right-side-bar:before {
		
	}
	.gridlayout-footer:before {
		background-color: var(--bs-blue);
		opacity: 0.5;
	}
	
	.dxgrid {
		height: 100%;
		
	}
	
	.dxbl-grid 
	{
		--dxbl-grid-font-size: 10px;
	}

	.chart {
		height: 100%;
	}

	.highlighted-item > td {
		background-color: var(--bs-danger-bg-subtle)
	}

	.card-body{
		padding: 0;
	}

	.highlighted-item2 > td {
		background-color: var(--bs-success-bg-subtle)
	}

	
	
</style>


<div class="card cardnew">
	<div class="card-header">
		@MainWorkWindowService.securityApi.Isin
		<button type="button" class="buttonclose btn-close" aria-label="Close" @onclick="OnClosingMain"></button>
	</div>
	<div class="card-body">

		<DxGridLayout CssClass="w-100 ch-480">
			<Rows>
				<DxGridLayoutRow />
				<DxGridLayoutRow Height="auto" />
			</Rows>
			<Columns>
				<DxGridLayoutColumn />
				<DxGridLayoutColumn />
				<DxGridLayoutColumn />
			</Columns>
			<Items>
				<DxGridLayoutItem Row="0" Column="0">
					<Template>
						<div class="gridlayout-item">
							Clasters
						</div>
					</Template>
				</DxGridLayoutItem>

				<DxGridLayoutItem Row="0" Column="1">
					<Template>
						<div class=" gridlayout-item">
							<DxChart CssClass="chart"
									 CustomizeSeriesPoint="@PrepareSeriesPoint"
									 @ref="Chart"
									 Data="MainWorkWindowService.Ticks"
									 Width="100%"
									 LabelOverlap="ChartLabelOverlap.Hide">
								<DxChartLineSeries Name="ticksLineSeries"
												   T="TradeApi"
												   TArgument="DateTime"
												   TValue="decimal"
												   ArgumentField="si => si.Time"
												   ValueField="si => si.Price"
												   HoverMode="ChartContinuousSeriesHoverMode.Series">

									<DxChartLegend Visible="false" />

									<!--<DxChartSeriesPoint Visible="true"
													HoverMode="ChartSeriesPointHoverMode.None" />-->
									<!--<DxChartSeriesLabel Visible="true"
													ValueFormat="ChartElementFormat.Thousands(1)" />-->
								</DxChartLineSeries>

								<DxChartArgumentAxis Visible="false">

									<DxChartAxisTick Visible="false" />
									<DxChartAxisMinorTick Visible="false" />

									<DxChartAxisGridLines Visible="true" />

								</DxChartArgumentAxis>


								<DxChartValueAxis Visible="false">

									<DxChartAxisTick Visible="false" />
									<DxChartAxisMinorTick Visible="false" />

									<DxChartAxisGridLines Visible="true" />

									<DxChartAxisRange StartValue="@MainWorkWindowService.minchart"
									                  EndValue="@MainWorkWindowService.maxchart" />
								</DxChartValueAxis>
							</DxChart>
						</div>
					</Template>
				</DxGridLayoutItem>

				<DxGridLayoutItem Row="0" Column="2">
					<Template>
						<div class=" gridlayout-item">
							<DxGrid CssClass="dxgrid"
									@ref=Grid
									Data="@MainWorkWindowService.Quotes"
									ShowAllRows="true"
									ColumnResizeMode="GridColumnResizeMode.NextColumn"
									TextWrapEnabled="false"
									CustomizeElement="Grid_CustomizeElement"
									ShowGroupPanel="false"
									HighlightRowOnHover="true"
									FocusedRowEnabled="true">

								<Columns>
									<DxGridDataColumn FieldName="Volume" Width="30px" />
									<DxGridDataColumn FieldName="Price" Width="30px" />
									<DxGridDataColumn FieldName="Type" Width="0" Visible="false" />
								</Columns>
							</DxGrid>
						</div>
					</Template>
				</DxGridLayoutItem>
			</Items>
		</DxGridLayout>
	</div>
</div>


@code 
{
	DxChart<TradeApi> Chart;
	IGrid Grid;
	//А вдруг у меня все получится
	//Влруг я буду прав

	[Parameter]
	public Action<int,SecurityApi>? OnClosing { get; set; }

	[Parameter]
	public int Index { get; set; }

	/*
	private SecurityApi _securityMain;

	[Parameter]
	public SecurityApi secutityMain
		{
		get => _securityMain;
			set
			{
			var lastvalue = _securityMain == null ? "empty" : _securityMain.Isin;

			if (secutityMain != null && _securityMain != value)
				{
				var ticks = Ticks;
			}

			Console.WriteLine($"new value = {value.Isin} prev value = {lastvalue}");
			_securityMain = value;
		}
	}*/

	private WorkWindowService _mainWorkWindowService;

	[Parameter]
	public WorkWindowService MainWorkWindowService
	{
		get => _mainWorkWindowService;
		set { _mainWorkWindowService = value; }
	}

	[Parameter]
	public ApiDataService ApiDataService { get; set; }


	//когда это не перелопачивается?

	protected override async Task<Task> OnInitializedAsync()
	{
		if (MainWorkWindowService== null)
			return base.OnInitializedAsync();

		MainWorkWindowService.dt = DateTime.Now;
		ApiDataService.NewMarketDepth += OnNewMarketDepth;
		ApiDataService.NewTicks += OnNewTicks;

		return base.OnInitializedAsync();
	}

	protected override async Task<Task> OnAfterRenderAsync(bool firstRender)
	{

		Console.WriteLine($"OnAfterRenderAsync sec {MainWorkWindowService.securityApi.Isin} firstrender={firstRender}");

		MainWorkWindowService.WebSockets.Add(await ApiDataService.SubscribeOrderBook(MainWorkWindowService.securityApi.id));
		MainWorkWindowService.WebSockets.Add(await ApiDataService.SubcribeTick(MainWorkWindowService.securityApi.id));

		return base.OnAfterRenderAsync(firstRender);
	}

	/// <summary>
	/// Подписка на все стаканы.
	/// </summary>
	/// <param name="bestbid"></param>
	/// <param name="secinstrument"></param>
	/// <param name="md"></param>
	private async void OnNewMarketDepth(MarketDepthLevel bestbid, string secinstrument, IEnumerable<MarketDepthLevel> md)
	{

		try
		{

			if (MainWorkWindowService.securityApi.id != secinstrument) return;

			if (md == null)
				return;

			MainWorkWindowService.Quotes = md;

			//TODO - при масштабированини этот уровень лучше менять. 
			MainWorkWindowService.maxchart = bestbid.Price + MainWorkWindowService.levelsFromBest * MainWorkWindowService.securityApi.PriceStep;
			MainWorkWindowService.minchart = bestbid.Price - MainWorkWindowService.levelsFromBest * MainWorkWindowService.securityApi.PriceStep;

			//Console.WriteLine($"MD recevied {secutityMain.id} NAME={secutityMain.Isin}");

			var dictionary = MainWorkWindowService.Quotes.Select(t => new { t.Price, t })
				.ToDictionary(t => t.Price, t => t);


			//int visibleitem = Grid.GetStartRowVisibleIndex();
			//Console.WriteLine("видимая строка " + Quotes.ToArray()[visibleitem].Price + $@"к1={Grid.GetVisibleRowCount()} к2={Quotes.Count()}");

			await InvokeAsync(() =>
			{
				try
				{

					//orderbookcount++;


					/*
					if (orderbookcount < 3)
						{
						//Console.WriteLine($"{DateTime.Now} New Quotes!");
						if (dictionary.ContainsKey(maxchart))
							{
							Console.WriteLine($"Scroll to {maxchart}!");
							ScrollToLastRow1(dictionary[maxchart].t);
						}

						if (dictionary.ContainsKey(minchart))
							{
							Console.WriteLine($"Scroll to {minchart}!");
							ScrollToLastRow1(dictionary[minchart].t);
						}
					}*/

					StateHasChanged();
				}
				catch (Exception ex)
				{

				}
			});
		}
		catch (Exception ex)
		{

		}
	}

	/// <summary>
	/// Подписка на все тики
	/// </summary>
	/// <param name="secinstrument"></param>
	/// <param name="ticks"></param>
	private async void OnNewTicks(string secinstrument, List<TradeApi> ticks)
	{
		if (MainWorkWindowService.securityApi.id != secinstrument) return;

		if(ticks==null)
			return;

		//Console.WriteLine(ticks[0].SecurityId + " new tick !" + ticks[0].Price);

		foreach (var tick in ticks)
		{
			MainWorkWindowService.start++;
			tick.Time = MainWorkWindowService.dt + TimeSpan.FromSeconds(MainWorkWindowService.start);
			MainWorkWindowService.Ticks.Add(tick);
			if (MainWorkWindowService.Ticks.Count > 15) MainWorkWindowService.Ticks.RemoveAt(0);
		}


		await InvokeAsync(() => { Chart.RefreshData(); });
	}


	//TODO: Тут надо подумать конечно.
	void ScrollToLastRow1(MarketDepthLevel level)
	{
		Grid.MakeDataItemVisibleAsync(level);

		Console.WriteLine("visible row " + Grid.GetStartRowVisibleIndex());
	}

	void ScrollToLastRow(int count)
	{
		Console.WriteLine($"{count} scroll");
		Grid.MakeRowVisible(count);

	}

	void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
	{

		if (e.ElementType == GridElementType.DataRow && (PlazaEngine.Entity.Side)e.Grid.GetRowValue(e.VisibleIndex, "Type") == Side.Sell)
		{
			e.CssClass = "highlighted-item";
		}

		if (e.ElementType == GridElementType.DataRow && (PlazaEngine.Entity.Side)e.Grid.GetRowValue(e.VisibleIndex, "Type") == Side.Buy)
		{
			e.CssClass = "highlighted-item2";
		}


	}

	protected void PrepareSeriesPoint(ChartSeriesPointCustomizationSettings pointSettings)
	{
		//всегда 1 элемент
		var t = (TradeApi)pointSettings.Point.DataItems.ToArray()[0];

		//показывать объём сверху
		pointSettings.PointLabel.Texts = new string[] { t.Volume.ToString() };
		pointSettings.PointLabel.Visible = true;

		//кружок
		pointSettings.PointAppearance.Symbol = ChartPointSymbol.Circle;

		//TODO: Исправить размеры - сделать адаптивными
		//TODO: написать логику расчета адаптивных элементов 
		pointSettings.PointAppearance.Size = (int)(t.Volume * 1.1m);

		if (t.Side == Side.Sell)
			pointSettings.PointAppearance.Color = Color.Red;
		else if (t.Side == Side.Buy)
			pointSettings.PointAppearance.Color = Color.Green;

	}

	async Task<Task> OnClosingMain()
	{
		ApiDataService.NewMarketDepth -= OnNewMarketDepth;
		ApiDataService.NewTicks -= OnNewTicks;

		ApiDataService.StopOrderBookProcesor(MainWorkWindowService.securityApi.id);

		foreach (var webSocket in MainWorkWindowService.WebSockets.ToList())
		{
			try
			{
				var r = await webSocket.StopOrFail(WebSocketCloseStatus.NormalClosure, "Закрыта вкладка");

				if (!r)
				{

				}
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
			}
		}
		//TODO: Сделать отписку по инструментам и полный Dispose

		OnClosing?.Invoke(Index, MainWorkWindowService.securityApi);
		return Task.CompletedTask;
	}


	void IDisposable.Dispose()
	{
		//не уверен, то это корректно работает.

	
	}
}