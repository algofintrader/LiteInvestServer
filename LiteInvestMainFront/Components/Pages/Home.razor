@page "/"
@using System.Collections.Concurrent
@using System.Collections.ObjectModel
@using LiteInvestMainFront.Data
@using LiteInvestServer.Json
@using Orientation = DevExpress.Blazor.Orientation
@using PlazaEngine.Entity
@using LiteInvestMainFront.Services

@inject IJSRuntime js;
@inject JsInteropService jsInteropService;

@using LiteInvestMainFront.Components.Layout
@rendermode InteractiveServer
@attribute [StreamRendering(true)]

@inject ApiDataService _apidataservice

<style>
	.internalSearch {
		margin: 10px
	}

	.stacklayout-item {
		font-size: 1.2em;
		font-weight: 500;
		text-align: center;
		height: 100%;
		padding: 0.5rem;
		text-align: center;
		position: relative;
		z-index: 0;
		display: flex;
		align-items: flex-start;
		justify-content: flex-start;
	}

		.stacklayout-item:before {
			content: " ";
			position: absolute;
			z-index: -1;
			width: 100%;
			height: 100%;
			left: 0;
			top: 0;
			opacity: 0.4;
		}

	.stacklayout-header:before {
		background-color: var(--bs-red);
	}

	.stacklayout-content:before {
		background-color: var(--bs-yellow);
	}

	.stacklayout-left-side-bar:before {
		background-color: var(--bs-green);
	}

	.stacklayout-right-side-bar:before {
		background-color: var(--bs-info);
	}

	.stacklayout-footer:before {
		background-color: var(--bs-blue);
		opacity: 0.5;
	}

	.k-tilelayout-item-header.k-card-header {
		padding-block: 4px !important;
		padding-inline: 4px !important;
	}

	.buttonclose {
		cursor: pointer;
		float: right;
	}

	@@media (max-width: 575.98px) {
		.stacklayout-item {
			font-size: 0.9em;
		}
	}

	.selected {
		border: 2px solid #FFFFFF !important; /* Пример выделения границей */
	}

</style>

<!--<AutoComplete @bind-Value="customerName"
TItem="Customer"
DataProvider="CustomersDataProvider"
PropertyName="CustomerName"
Placeholder="Выберите инструмент"
OnChanged="(Customer customer) => OnAutoCompleteChanged(customer)" />-->


<nav class="navbar navbar-expand-lg bg-body-tertiary" data-bs-theme="dark">
	<div class="container-fluid">
		<a class="navbar-brand" href="#">LiteInvest</a>
		<form class="d-flex internalSearch" role="search">
			<DxComboBox @ref=combobox
						Data="@Instruments"
						@bind-Value="@securitySelected"
						TextFieldName="@nameof(securitySelected.Isin)"
						SearchMode="@ListSearchMode.AutoSearch"
						SearchFilterCondition="@ListSearchFilterCondition.Contains"
						ListRenderMode="ListRenderMode.Entire"
						CssClass="cw-480"
						InputId="cbVirtualScrolling" />
			<!--<AutoComplete @bind-Value="securitySelected"
			TItem="SecurityApi"
			DataProvider="InstrumentsDataProvider"
			PropertyName="Isin"
			Placeholder="Выберите инструмент"
			OnChanged="(SecurityApi customer) => OnAutoCompleteChanged(customer)" />-->
			<!--<input class="form-control me-2" type="search" placeholder="Инструменты"  aria-label="Search">
			<button class="btn btn-outline-success" type="submit">Search</button>-->
		</form>
		<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
			<span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse" id="navbarSupportedContent">
			<ul class="navbar-nav me-auto mb-2 mb-lg-0">
				<li class="nav-item dropdown">
					<a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
						Торговля
					</a>
					<ul class="dropdown-menu">
						<li><a class="dropdown-item" href="#">Позиции</a></li>
						<li><a class="dropdown-item" href="#">Счета</a></li>
						<li><hr class="dropdown-divider"></li>
						<li><a class="dropdown-item" href="#">Ордера</a></li>
					</ul>
				</li>
			</ul>
			<ul class="nav navbar-nav ml-auto">
				<!--<li class="nav-item">
				<a class="nav-link" href="#"><span class="fas fa-user"></span> Sign Up</a>
				</li>-->
				<li class="nav-item">
					<a class="nav-link" href="#" onclick="@OnLogin"><span class="fas fa-sign-in-alt"></span>@textlogin</a>
				</li>
			</ul>
		</div>
	</div>
</nav>



<DxLoadingPanel @bind-Visible="loadingLogIn"
IsContentBlocked="true"
ApplyBackgroundShading="true"
IndicatorAreaVisible="false"
Text="Входим..." />

<DxWindow @ref=windowRef
AllowResize="true"
ShowCloseButton="true"
CloseOnEscape="true"
HeaderText="Авторизация"
FooterText="Footer"
ShowFooter="true"
Width="max(25vw, 250px)"
MinWidth="300"
MinHeight="200"
MaxWidth="800"
MaxHeight="500"
@bind-Visible=windowVisible>
	<BodyContentTemplate>
		<LogInForm @ref="logform" />
	</BodyContentTemplate>

	<FooterContentTemplate>
		<DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="OK" Click="@OnLoginClick" />
	</FooterContentTemplate>
</DxWindow>

<TelerikTileLayout Columns="RegisteredInstruments.Count"
ColumnWidth="auto"
RowHeight="90vh"
Reorderable="true"
ColumnSpacing="0px"
RowSpacing="0px"
Resizable="true">
	<TileLayoutItems>
		@foreach (var security in RegisteredInstruments)
		{
			<TileLayoutItem>
				<HeaderTemplate>
					@security.Isin
					<svg @key="security.SpecialHash" class="buttonclose" @onclick="() => OnClosingMain(security)" xmlns="http://www.w3.org/2000/svg" width="10" height="10" viewBox="0 0 10 10">
						<line x1="0" y1="0" x2="10" y2="10" stroke="black" stroke-width="2"/>
						<line x1="0" y1="10" x2="10" y2="0" stroke="black" stroke-width="2"/>
					</svg>
				</HeaderTemplate>
				<Content>
					<div @onclick="@((e) => {@js.InvokeVoidAsync(" toggleSelected", e);})" class="tile-content">
						<WorkWindow @key="security.SpecialHash" 
						Data="GetBuffersData(security.id)"
						Ticks="GetBuffersData(security.id).Ticks" start="GetBuffersData(security.id).start" dt="GetBuffersData(security.id).dt" 
						levelsFromBest="GetBuffersData(security.id).levelsFromBest" 
						minchart="GetBuffersData(security.id).minchart"
						maxchart="GetBuffersData(security.id).maxchart"
						OnClosing="OnClosingWorkingWindow" secutityMain="@security" 
						ApiDataService="@_apidataservice" />
					</div>
				</Content>
			</TileLayoutItem>
		}
	</TileLayoutItems>
</TelerikTileLayout>

@* <DxStackLayout CssClass="w-100 ch-480" Orientation="Orientation.Horizontal">
	<Items>

		@foreach (var instr in RegisteredInstruments)
		{
			Console.WriteLine($"ReRendering {instr.Isin}");
			<DxStackLayoutItem>
				<Template>
					<div>
						<WorkWindow OnClosing="OnClosingWorkingWindow" secutityMain="@instr" ApiDataService="@_apidataservice" />
					</div>
				</Template>
			</DxStackLayoutItem>
		}

	</Items>
</DxStackLayout> *@




@code {




	public class Scale
	{
		public string Value { get; set; }
	}

	DxComboBox<SecurityApi, SecurityApi> combobox;

	public List<Scale> Scales = new();
	public Scale selectedvalue;

	string textlogin = "Войти";
	bool loadingLogIn;

	DxWindow windowRef;
	bool windowVisible;
	LogInForm logform;

	private SecurityApi _securitySelected;
	private SecurityApi securitySelected
	{
		get
		{
			return _securitySelected;
		}
		set
		{
			_securitySelected = value;
			OnAutoCompleteChanged(value);

		}
	}





	protected async override Task OnInitializedAsync()
	{
		if (jsInteropService.ServiceObjectDotNetReference != null)
		{
			js.InvokeVoidAsync("setDonNetObjectReference", jsInteropService.ServiceObjectDotNetReference);

		
		}


	}

	public void OnClosingMain(SecurityApi sec)
	{
		try
		{

			var index = RegisteredInstruments.FindIndex(s => s.SpecialHash == sec.SpecialHash);
			RegisteredInstruments.RemoveAt(index);
		}
		catch (Exception ex)
		{

		}



		// Remove tile with the given ID
		//RegisteredInstruments.Remove(instrument);
	}

	public IEnumerable<SecurityApi>? Instruments = new List<SecurityApi>();

	List<SecurityApi> RegisteredInstruments = new();


	Task OnLogin()
	{
		windowVisible = true;
		return Task.CompletedTask;
	}


	/*
	private IEnumerable<Customer> GetCustomers()
		{
		return new List<Customer>
			{
			new(1, "Pich S"),
			new(2, "sfh Sobi"),
		};
	}*/

	ConcurrentDictionary<string,BufferData> bufferDatas = new ();

	ConcurrentDictionary<string, List<TradeApi>> TicksDictionary = new();

	public BufferData GetBuffersData(string secid)
	{
		if (!bufferDatas.ContainsKey(secid))
			bufferDatas.TryAdd(secid, new BufferData());

		return bufferDatas[secid];
	}

	/*
	public List<TradeApi> GetTicks(string secid)
	{
		if (!TicksDictionary.ContainsKey(secid))
			TicksDictionary.TryAdd(secid, new List<TradeApi>());

		return TicksDictionary[secid];
	}*/

	private void OnAutoCompleteChanged(SecurityApi securityApi)
	{

		if (securityApi == null)
			return;


		var clone = (SecurityApi) securityApi.Clone();
		clone.SpecialHash = DateTime.Now.GetHashCode().ToString();


		TicksDictionary.TryAdd(securityApi.id, new List<TradeApi>());
		//bufferDatas.TryAdd(securityApi.id, new BufferData());
		
		RegisteredInstruments.Add(clone);
		//RegisteredInstruments.TryAdd(securityApi.Isin,securityApi);

		Console.WriteLine($"'{securityApi.Isin}' registered.");

		InvokeAsync(StateHasChanged);
	}


	private async void OnLoginClick(MouseEventArgs obj)
	{
		if (logform != null)
		{
			loadingLogIn =true;
			var res = await _apidataservice.LogIn(logform.Email, logform.pass);
			Instruments = await _apidataservice.GetInstruments();

			Console.WriteLine($"Loaded instruments {Instruments.Count()}");

			loadingLogIn = false;
			textlogin = "ON";
		}

		windowRef.CloseAsync();
	}


	private void OnClosingWorkingWindow(SecurityApi instr)
	{

		int index = RegisteredInstruments.FindIndex(instrument => instrument.SpecialHash == instr.SpecialHash);

		//RegisteredInstruments.RemoveAt(index);
		RegisteredInstruments.Remove(instr);
		//RegisteredInstruments.TryRemove(instr.Isin, out var _);
		InvokeAsync(StateHasChanged);
	}


}

<script>
	function toggleSelected(event) {
		const element = event.target.closest('.k-tilelayout-item');
		element.classList.toggle('.selected');
	}
</script>