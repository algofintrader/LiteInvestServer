@using LiteInvestMainFront.Data
@using LiteInvestServer.Entity
@using LiteInvestServer.Helpers
@using System.Timers

@implements IDisposable;

<DxGrid 

@ref="gridPositions"
CssClass="dxgrid"
Data="@OpenedPositions"
ShowAllRows="true"
ColumnResizeMode="GridColumnResizeMode.NextColumn"
TextWrapEnabled="false"
ShowGroupPanel="false"
HighlightRowOnHover="true"
FocusedRowEnabled="true">

    <Columns>
        <DxGridDataColumn FieldName="secName" Width="auto"  />
        <DxGridDataColumn FieldName="Open" Width="auto" />
        <DxGridDataColumn FieldName="PosValue" Width="auto" />
        <DxGridDataColumn FieldName="MaxOpened" Width="auto" />
        <DxGridDataColumn FieldName="Side" Width="auto" />
        <DxGridDataColumn FieldName="AverageEntry" Width="auto" />
        <DxGridDataColumn FieldName="RealizedPnl" Width="auto" />
        <DxGridDataColumn FieldName="UnRealizedPnlPoints" Width="auto" />
    </Columns>

</DxGrid> 

@code {

    DxGrid gridPositions;
    List<Pos> OpenedPositions { get; set; }
    System.Timers.Timer timer;

    [Parameter]
    public ApiDataService apiDataService{ get; set; }

    protected override Task OnInitializedAsync()
    {
        LoadPoses();
        return base.OnInitializedAsync();
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Stop();
            timer.Dispose();
        }
    }

    public async void LoadData()
    {
        var positions = await apiDataService.GetPositions();
        if (positions != null)
        {
            OpenedPositions = positions;
        }
        InvokeAsync(StateHasChanged);
    }

    public async void LoadPoses()
    {
        LoadData();
        timer = Helper.CreateTimerAndStart(LoadData, 1500, true);
        timer.Start();
    }

}
