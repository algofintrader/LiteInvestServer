@using System.Collections.ObjectModel
@using System.Reactive.Linq
@using BlazorRenderAuto.Client.Services
@using LiteInvest.Entity.ServerEntity

@inject ApiDataService ApiDataService
@rendermode InteractiveAuto

<DxWindow @ref=windowRef
          AllowResize="true"
          ShowCloseButton="true"
          CloseOnEscape="true"
          HeaderText="Авторизация"
          FooterText="Footer"
          ShowFooter="true"
          Width="max(25vw, 250px)"
          MinWidth="300"
          MinHeight="200"
          MaxWidth="800"
          MaxHeight="500"
          @bind-Visible=windowVisible>
    <BodyContentTemplate>
        Привет
    </BodyContentTemplate>

    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="OK" />
    </FooterContentTemplate>
</DxWindow>

<nav id="header" class="navbar navbar-expand-lg bg-body-tertiary" data-bs-theme="dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">LiteInvest</a>
@*         <form class="d-flex internalSearch" role="search">
            <DxComboBox Data="@Instruments"
                        ValueFieldName="Isin"
                        @bind-Value="@SecuritySelected"
                        TextFieldName="@nameof(SecuritySelected.Isin)"
                        SearchMode="@ListSearchMode.AutoSearch"
                        SearchFilterCondition="@ListSearchFilterCondition.Contains"
                        ListRenderMode="ListRenderMode.Virtual"
                        CssClass="cw-480"
                        InputId="cbVirtualScrolling" />
        </form> *@

        <form class="d-flex internalSearch" role="search">
            <TelerikAutoComplete Data="@Instruments"
                                 ValueField="@nameof(SecuritySelected.Isin)"
                                 @bind-Value="@AutoComplete"
                                 Placeholder="Enter your role (can be free text)"
                                 Filterable="true"
                                 OnChange="OnChangeHandler"
                                 FilterOperator="@StringFilterOperator.StartsWith"
                                 ShowClearButton="true" />
        </form>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Торговля
                    </a>
                    <ul class="dropdown-menu">
                    </ul>
                </li>
            </ul>
            <ul class="nav navbar-nav ml-auto">
                <!--<li class="nav-item">
                <a class="nav-link" href="#"><span class="fas fa-user"></span> Sign Up</a>
                </li>-->
                <li class="nav-item">
                    <a class="nav-link" href="#" @onclick="OnLoginClick" @ref="LogInButton"><span class="fas fa-sign-in-alt"></span>@textlogin</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

@code
{
    private string lastOnChangeValue { get; set; }

    private async Task OnChangeHandler (object theUserInput)
    {
        string currValue = theUserInput as string;

        if (currValue != lastOnChangeValue)
        {
            lastOnChangeValue = currValue;

            if (Instruments.FirstOrDefault(i => i.Isin == AutoComplete) != null)
            {
                SecuritySelected = Instruments.FirstOrDefault(i => i.Isin == AutoComplete);
            }
        }
    }

    DxWindow windowRef;
    bool windowVisible;

    [Parameter] public Action LoginClicked { get; set; }
    [Parameter] public Action<SecurityApi> NewSecSelected { get; set; }
    [Parameter] public ObservableCollection<SecurityApi> SecurityOpened { get; set; }

    IEnumerable<SecurityApi> Instruments { get; set; }
    string textlogin = "Войти";

    private string AutoComplete { get; set; }

    private SecurityApi _securityApiSelected;

    public SecurityApi SecuritySelected
    {
        get => _securityApiSelected;
        set
        {
            i++;
            _securityApiSelected = value;
            if (i != 1)
            {
                SecurityApiChanged(value);
            }
        }
    }
    public ElementReference LogInButton { get; set; }

    int i = 0;

    private async Task<Task> OnLoginClick(MouseEventArgs obj)
    {

        try
        {

            var res = await ApiDataService.LogIn("samujan1@yandex.ru", "pass2");

            if (res == null)
                Console.WriteLine("ERROR LOGIN");

            Instruments = await ApiDataService.GetInstruments();
            SecuritySelected = Instruments.FirstOrDefault();


            Console.WriteLine($"Loaded instruments {Instruments.Count()}");


            textlogin = "ON";

            LoginClicked?.Invoke();

            windowVisible = true;
            //windowRef.ShowAsync();

            return Task.CompletedTask;

            // if (logform != null)
            // {
            // 	loadingLogIn =true;
            // 	var res = await _apidataservice.LogIn(logform.Email, logform.pass);
            // 	Instruments = await _apidataservice.GetInstruments();

            // 	Console.WriteLine($"Loaded instruments {Instruments.Count()}");

            // 	loadingLogIn = false;
            // 	textlogin = "ON";
            // }

            // windowRef.CloseAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return Task.CompletedTask;
        }
    }

    private Task SecurityApiChanged(SecurityApi sec)
    {
        ApiDataService.OpenInstrument(sec);
        return Task.CompletedTask;
    }
}
