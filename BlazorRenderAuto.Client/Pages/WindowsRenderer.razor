@using System.Collections.ObjectModel
@using BlazorRenderAuto.Client.Services
@using DevExpress.Blazor.Internal
@using LiteInvest.Entity.ServerEntity
@inject ApiDataService _apidataService

@inject IJSRuntime js;
@implements IDisposable

@rendermode InteractiveServer

<TelerikTileLayout Columns="OpenedInstruments.Count"
ColumnWidth="auto"
RowHeight="90vh"
Reorderable="true"
ColumnSpacing="0px"
RowSpacing="0px"
Resizable="true">



	<TileLayoutItems>
		@foreach (var security in OpenedInstruments)
		{
            <TileLayoutItem @key="security.SpecialHash">
                <HeaderTemplate>
                    <div @onclick="() => focusWindowByHeaderClick(security.SpecialHash)">
                        @security.Isin
                        <svg class="buttonclose" @onclick="() => OnClosingMain(security)" xmlns="http://www.w3.org/2000/svg" width="10" height="10" viewBox="0 0 10 10">
                            <line x1="0" y1="0" x2="10" y2="10" stroke="black" stroke-width="2" />
                            <line x1="0" y1="10" x2="10" y2="0" stroke="black" stroke-width="2" />
                        </svg>
                    </div>
                </HeaderTemplate>
                <Content>
                    <div class="tile-content">
						<WorkWindow secHash="@security.SpecialHash" secutityMain="@security"  />
                    </div>
                </Content>
            </TileLayoutItem>
        }
	</TileLayoutItems>
</TelerikTileLayout>

@code {


	private bool shouldNOTrenderafterclick = false;

    public string lasthashForRender { get; set; } = "";

	private void focusWindowByHeaderClick(string id)
	{
		shouldNOTrenderafterclick = true;
		js.InvokeVoidAsync("focusElementById", id);
	}

	ObservableCollection<SecurityApi> OpenedInstruments { get; set; } = new();

	protected override void OnInitialized()
	{

		Console.WriteLine($" {DateTime.Now} On Initialized -> WindowsRenderer");

		base.OnInitialized();
	}

	protected override Task OnAfterRenderAsync(bool firstRender)
	{

		if (firstRender)
        {
            _apidataService.LastwindowOpened += () =>
            {
                lasthashForRender = "";
            };

			_apidataService.NewSecOpened += (sec) =>
            {
                lasthashForRender = sec.SpecialHash;

				OpenedInstruments.Add(sec);
				InvokeAsync(StateHasChanged);
			};


		}

		return base.OnAfterRenderAsync(firstRender);
	}

	protected override void OnParametersSet()
	{
		Console.WriteLine($" {DateTime.Now} ON Parameters Set WindowsRenderer");

		base.OnParametersSet();
	}

	private void OpenInstrument(SecurityApi sec)
	{
		OpenedInstruments.Add(sec);
		Console.WriteLine($"'{sec.Isin} hash = {sec.SpecialHash}' registered.");

		//не требуется, так как мы напрямую работем с коллекцией.
		//InvokeAsync(StateHasChanged);
	}

	protected override bool ShouldRender()
	{
		if (shouldNOTrenderafterclick)
        {
			Console.WriteLine("Pass Render Windows");
            shouldNOTrenderafterclick = false;
			return false;
        }

		return base.ShouldRender();
	}

	public Task OnClosingMain(SecurityApi sec)
	{
		try
		{
			//await _apidataservice.CloseInstrument(sec);
			var index = OpenedInstruments.FindIndex(s => s.SpecialHash == sec.SpecialHash);
			OpenedInstruments.RemoveAt(index);
			return Task.CompletedTask;

		}
		catch (Exception ex)
		{
			return Task.CompletedTask;
		}

		// Remove tile with the given ID
		//RegisteredInstruments.Remove(instrument);
	}

    public void Dispose()
    {
		GC.SuppressFinalize(this);
    }

}


