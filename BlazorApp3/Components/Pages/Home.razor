@page "/"
@rendermode InteractiveServer

@using System.Collections.Concurrent
@using BlazorApp3.Data
@using System.ComponentModel.DataAnnotations
@using System.Runtime.InteropServices.JavaScript
@using LiteInvestServer.Json
@using PlazaEngine.Entity

@inject ApiDataService _apidataservice


<Menu></Menu>

<DxButton  RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Contained"
          Text="@textLogin" Click="@Handler" />

<DxComboBox Data="@Securities"
            Value="@securityApiSelected"
            ValueChanged="@((SecurityApi sec) => SecChanged(sec))"
			TextFieldName="@nameof(securityApiSelected.Isin)"
            SearchMode="@ListSearchMode.AutoSearch"
            SearchFilterCondition="@ListSearchFilterCondition.Contains"
            ListRenderMode="ListRenderMode.Entire"
            CssClass="cw-480"
			InputId="cbVirtualScrolling" />

<DxStackLayout CssClass="w-100 ch-480" Orientation="Orientation.Horizontal">
	<Items>
		
		@for (int i=0;i<SecuritiesRegiestered.Count;i++)
		{
			<WorkWindow @key="SecuritiesRegiestered[i].SpecialHash" Index="i" secid="@SecuritiesRegiestered[i].id" ApiDataService="@_apidataservice" Closed="@ClosedWindow" />

		}
	</Items>
</DxStackLayout>


<DxLoadingPanel Visible="@visibleloading" />

@code {

	string textLogin = "Login";
	bool visibleloading;

	SecurityApi securityApiSelected;

	List<SecurityApi> SecuritiesRegiestered = new ();

	IEnumerable<SecurityApi> Securities { get; set; }


	private async void Handler(MouseEventArgs args)
	{
		visibleloading = true;
		var r = await _apidataservice.LogIn("samujan1@yandex.ru","pass2");

		if (r != null)
		{
			Console.WriteLine("Connected!");
			GetInstruments();
		}

		StateHasChanged();
		visibleloading = false;
		textLogin = "Logged!";
	}

	private async void GetInstruments()
	{
		Securities = await _apidataservice.GetInstruments();
		Console.WriteLine($"Instruments = {Securities.Count()} Received");
		StateHasChanged();
	}

	int hash = 0;
	private async void OpenClick(MouseEventArgs args)
	{
		Console.WriteLine($"Subscribing for Quotes {securityApiSelected.id}!");

		var clone = (SecurityApi) securityApiSelected.Clone();

		hash++;
		clone.SpecialHash = DateTime.Now.GetHashCode().ToString()+hash;
		SecuritiesRegiestered.Add(clone);

		StateHasChanged();
	}


	void SecChanged(SecurityApi sec)
	{
		securityApiSelected = sec;
		OpenClick(null);
	}


	private void ClosedWindow(int index)
	{
		SecuritiesRegiestered.RemoveAt(index);

		InvokeAsync(StateHasChanged);
	}

}