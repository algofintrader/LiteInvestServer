@using LiteInvestServer.Json
@using System.Collections.Concurrent
@using BlazorApp3.Data

@inject ApiDataService _apidataservice
@inject BufferService bufferService

<div class="card">
    <DxMenu Title="LiteInvest" ItemsPosition="ItemPosition.Center" DropDownActionMode="MenuDropDownActionMode.Click">
        <Items>
            <DxMenuItem Text="Торговля" IconCssClass="oi oi-layers">
                <Items>
                    <DxMenuItem Text="Позиции" />
                    <DxMenuItem Text="Ордера" />
                </Items>
            </DxMenuItem>

            <DxMenuItem Text="Настройки" IconCssClass="oi oi-person">
                <Items>
                    <DxMenuItem Text="Базовые настройки" />
                    <DxMenuItem Text="Настройки профиля" />
                </Items>
            </DxMenuItem>

            <DxMenuItem Text="Документация" IconCssClass="oi oi-book" BeginGroup="true" />

            <!-- Элемент меню для ComboBox, перед "Логином" -->
            <DxMenuItem CssClass="align-self-center" Position="ItemPosition.End" style="margin-right: 4px">
                <Template>
                    <DxComboBox Data="@bufferService.Securities"
                                Value="@bufferService.securityApiSelected"
                                ValueChanged="@((SecurityApi sec) => SecChanged(sec))"
                                TextFieldName="@nameof(bufferService.securityApiSelected.Isin)"
                                SearchMode="@ListSearchMode.AutoSearch"
                                SearchFilterCondition="@ListSearchFilterCondition.Contains"
                                ListRenderMode="ListRenderMode.Entire"
                                CssClass="cw-480"
                                InputId="cbVirtualScrolling" />
                </Template>
            </DxMenuItem>

            @if (bufferService.UserLoggedIn)
            {
                <DxMenuItem Text="Log out" IconCssClass="oi oi-person" BeginGroup="true" Click="@OnClick" Position="ItemPosition.End" />
            }
            else
            {
                <DxMenuItem Text="Log in" IconCssClass="oi oi-person" BeginGroup="true" Click="@OnClick" Position="ItemPosition.End" />
            }

        </Items>
    </DxMenu>

</div>

<DxWindow
    AllowResize="false"
    ShowCloseButton="true"
    CloseOnEscape="true"
    HeaderText="Login"
    ShowFooter="false"
    Width="max(25vw, 250px)"
    MinWidth="300"
    MinHeight="200"
    MaxWidth="800"
    MaxHeight="500"
    @bind-Visible=bufferService.windowVisible>
	
	<BodyContentTemplate>
		<SampleEditForm/>
	</BodyContentTemplate>

</DxWindow>

@code
{
    protected async override Task OnInitializedAsync()
    {
        bufferService.OnLogin += () => InvokeAsync(StateHasChanged);
    }

	string GetButtonText() => !bufferService.windowVisible ? "SHOW A WINDOW" : "CLOSE A WINDOW";

	private async void OpenClick(MouseEventArgs args)
	{
		Console.WriteLine($"Subscribing for Quotes {bufferService.securityApiSelected.id}!");
		bufferService.SecuritiesRegiestered.TryAdd(bufferService.securityApiSelected.id, bufferService.securityApiSelected);

		bufferService.OnComboBoxValuePicked?.Invoke();
	}

	void SecChanged(SecurityApi sec)
	{
		bufferService.securityApiSelected = sec;
		OpenClick(null);
	}

	void OnClick()
	{
		bufferService.windowVisible = true;
	}
}
